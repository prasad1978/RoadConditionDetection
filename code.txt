package com.example.myapplicatio;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

import android.Manifest;
import android.content.DialogInterface;
import android.content.Intent;
import android.hardware.GeomagneticField;
import android.location.Location;
import android.location.LocationManager;
import android.os.Build;
import android.os.Bundle;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener2;
import android.hardware.SensorManager;
import android.os.Environment;

import android.os.Bundle;
import android.provider.Settings;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;

@RequiresApi(api = Build.VERSION_CODES.KITKAT)
public class MainActivity extends AppCompatActivity implements SensorEventListener2 {
    FileWriter f;
    private TextView ax;
    private TextView ay;
    SensorManager manager;
    Button Start;
    Button Stop;
    boolean active;
    float xValueM;
    float yValueM;
    float zValueM;
    LocationManager locationManager;
    String latitude;
    String longitude;
    double longi;
    double lat;
    double alt;
    private static final int REQUEST_LOCATION = 1;
    private double teta;
    private double pie;
    private boolean stable = true;
    long lastUpdate;
    long lu;
    int additionalHour = 0;
    int additionalMinute = 0;
    int additionalSeconds = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        manager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
        ax = findViewById(R.id.textView5);
        ay = findViewById(R.id.textView3);
        Start = (Button)findViewById(R.id.button4);
        Stop = (Button)findViewById(R.id.button5);
        active = false;


        Start.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                Start.setEnabled(false);
                Stop.setEnabled(true);
                try {
                    f = new FileWriter(new File(getStorageDir(), "DATASET" + System.currentTimeMillis() + ".csv"));
                } catch (IOException e) {
                    e.printStackTrace();
                }

                manager.registerListener(MainActivity.this, manager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION), SensorManager.SENSOR_DELAY_NORMAL);
                manager.registerListener(MainActivity.this, manager.getDefaultSensor(Sensor.TYPE_GYROSCOPE), SensorManager.SENSOR_DELAY_NORMAL);
                manager.registerListener(MainActivity.this, manager.getDefaultSensor(Sensor.TYPE_GEOMAGNETIC_ROTATION_VECTOR), SensorManager.SENSOR_DELAY_NORMAL);

                active = true;
                return true;

            }
        });
        Stop.setOnTouchListener(new View.OnTouchListener() {
            @RequiresApi(api = Build.VERSION_CODES.KITKAT)
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                Start.setEnabled(true);
                Stop.setEnabled(false);
                active = false;
                manager.flush(MainActivity.this);
                manager.unregisterListener(MainActivity.this);
                try {
                    f.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                return true;

            }
        });
    }
    private String getStorageDir() {
        return this.getExternalFilesDir(null).getAbsolutePath();

    }

    @Override
    public void onFlushCompleted(Sensor sensor) {

    }
    public void setStable(boolean stable) {
        this.stable = stable;
    }
    public double teta(double y){
        double teta = Math.acos(y/9.800); 
        return teta;
    }

    public double pie(double x, double z){
        double pie = Math.atan(z/x);
        return pie;
    }
    public double reOrientX (float x, float y, float z) {

        if (this.stable) {
            teta = this.teta(y);
            pie = this.pie(x, z);

        }

        double xPie = x*Math.cos(pie) - z*Math.sin(pie);
        double yPie = y;
        double zPie = x*Math.sin(pie) + z*Math.cos(pie);
        double xTeta = xPie*Math.cos(teta) + yPie*Math.sin(teta);
        double zTeta = zPie;
        double alpha = Math.atan(xPie/zPie);
        double xAplha = xTeta*Math.cos(alpha) - zTeta*Math.sin(alpha);
        return xAplha;
    }
    public double reOrientY (float x, float y, float z) {

        if (this.stable) {
            teta = this.teta(y);
            pie = this.pie(x, z);

        }
        double xPie = x*Math.cos(pie) - z*Math.sin(pie);
        double yPie = y;
        double yTeta = -xPie*Math.sin(teta) + yPie*Math.cos(teta);
        return yTeta;
    }
    public double reorientZ (float x, float y, float z) {

       if (this.stable) {
            teta = this.teta(y);
            pie = this.pie(x, z);


        }
        double xPie = x*Math.cos(pie) - z*Math.sin(pie);
        double yPie = y;
        double zPie = x*Math.sin(pie) + z*Math.cos(pie);
        double xTeta = xPie*Math.cos(teta) + yPie*Math.sin(teta);
        double zTeta = zPie;
        double alpha = Math.atan(xPie/zPie);
        double zAlpha = xTeta*Math.sin(alpha) + zTeta*Math.cos(alpha);
        return zAlpha;

    }

    @Override
    public void onSensorChanged(SensorEvent evt) {
        if(active) {
            try {
                switch(evt.sensor.getType()) {

                    case Sensor.TYPE_LINEAR_ACCELERATION:
                        Calendar calendar = Calendar.getInstance();
                        SimpleDateFormat mdformat = new SimpleDateFormat("HH:mm:ss");
                        String strDate = mdformat.format(calendar.getTime());


                        long actualTime = evt.timestamp;

                        if(actualTime - lastUpdate > 500000000) {


                        float X = (float) this.reOrientX(evt.values[0],evt.values[1],evt.values[2]);
                        float Y = (float) this.reOrientY(evt.values[0],evt.values[1],evt.values[2]);
                        float Z = (float) this.reorientZ(evt.values[0],evt.values[1],evt.values[2]);
                        f.write(String.format("%d;Acceleration; %f; %f; %f;%s\n", evt.timestamp,  X,  Y,  Z, strDate));
                        ax.setText(" X: " + X + "\n\n" + " Y: " + Y + "\n\n" + " Z: " +  Z + "\n\n");

                            lastUpdate = actualTime;}
                        break;


                    case Sensor.TYPE_GYROSCOPE:
                        long at = evt.timestamp;
                        Calendar calenda = Calendar.getInstance();
                        SimpleDateFormat mdforma = new SimpleDateFormat("HH:mm:ss");
                        String strDat = mdforma.format(calenda.getTime());

                        if(at - lu > 700000000) {
                        ay.setText(" X: " + evt.values[0] + "\n\n" + " Y: " + evt.values[1] + "\n\n" + " Z: " + evt.values[2] + "\n\n");
                        f.write(String.format("%d; Gyroscope; %f; %f; %f;%s\n", evt.timestamp, evt.values[0], evt.values[1], evt.values[2],strDat));
                            lu = at;}

                            break;


                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    @Override
    public void onAccuracyChanged(Sensor sensor, int i) {

    }
